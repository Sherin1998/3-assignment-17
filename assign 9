1. A relative path refers to the location of a file or directory relative to the current working directory. It does not begin with a root folder and is typically used when referencing files or directories within the same directory or in a subdirectory of the current working directory.

2. An absolute path starts with the root directory of the file system on your operating system. On Windows, an absolute path starts with a drive letter followed by a colon (e.g., `C:`) and then the path to the file or directory. On Unix-based systems like Linux and macOS, an absolute path starts with a slash (`/`) and then the path to the file or directory.

3. The `os.getcwd()` function returns the current working directory of the Python process. This is the directory from which the Python script is being run.

   The `os.chdir()` function changes the current working directory to the path specified as an argument. This allows you to navigate the file system and perform operations in different directories.

4. In a file system, `.` (dot) represents the current directory, and `..` (dot-dot) represents the parent directory of the current directory. These are special directory names used to navigate the file system hierarchy.

   - The `.` directory is used to refer to the current directory. For example, if you are in the directory `/home/user`, `./file.txt` refers to `file.txt` in the current directory (`/home/user`).

   - The `..` directory is used to refer to the parent directory of the current directory. For example, if you are in the directory `/home/user`, `../file.txt` refers to `file.txt` in the parent directory (`/home`).

   These directory references are commonly used in command-line interfaces and scripts to navigate and specify paths within a file system.


5. If an existing file is opened in write mode ('w'), the file is truncated, which means that all existing data in the file is deleted. Subsequent writes to the file will start from the beginning, effectively overwriting the previous contents.

6. The difference between read() and readlines() is how they read data from a file:

7. read(): Reads the entire file and returns its contents as a single string. It reads the file until the end of the file (EOF) marker.
readlines(): Reads all lines from the file and returns them as a list of strings. Each string in the list represents a line from the file, including the newline character at the end of each line.
8. A shelf value in Python resembles a dictionary data structure. It is similar to a dictionary in that it stores key-value pairs, but it is persistent, meaning that it is stored in a file on disk and retains its data even after the program that created it has terminated. Shelf values are often used for simple persistent storage of data that needs to be accessed across multiple program executions
