1. __iter__ Method
The __iter__ method should return the iterator object itself. It is called once at the beginning of an iteration.

2. __next__ Method (or next in Python 2)
The __next__ method should return the next item in the sequence each time it is called. When there are no more items to return, it should raise a StopIteration exception to signal that the iteration is complete.




2.  To manage printing in your classes, you typically use the __str__ and __repr__ methods. These methods control what gets displayed when you print an instance of the class or when you inspect it in an interactive session.

__str__ Method
The __str__ method is intended to provide a "pretty" or user-friendly string representation of the object. It is used by the built-in print function and the str() function.

__repr__ Method
The __repr__ method is intended to provide an unambiguous string representation of the object that can ideally be used to recreate the object. It is used by the built-in repr() function and by the interactive interpreter.


3. To intercept slice operations in a class, you need to implement the __getitem__, __setitem__, and __delitem__ methods. These methods allow you to define custom behavior when your class instances are accessed, modified, or deleted using slicing.

Key Methods
__getitem__(self, key):

Called to retrieve an item or a slice from the object.
key can be an integer, a slice object, or a tuple of these.
__setitem__(self, key, value):

Called to set an item or a slice in the object.
key can be an integer, a slice object, or a tuple of these.
value is the new value to set.
__delitem__(self, key):

Called to delete an item or a slice from the object.
key can be an integer, a slice object, or a tuple of these



4. To capture in-place addition in a class, you need to implement the __iadd__ method. This method is part of Python's special method suite that allows you to define the behavior of in-place addition using the += operator.

__iadd__ Method
The __iadd__ method is called to handle in-place addition (+=). If __iadd__ is not defined, Python falls back to using __add__ and assignment.

5. 
